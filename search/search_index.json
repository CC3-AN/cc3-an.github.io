{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenidos a CC-3 En cursos anteriores han aprendido a programar en un nivel bastante alto de abstracci\u00f3n. Ac\u00e1 nos concentraremos en la m\u00e1quina y c\u00f3mo esta ejecuta los programas que ustedes escriben. En este curso nos preocuparemos no tanto por el proceso de escribir un programa de computadora, sino m\u00e1s bien en c\u00f3mo la computadora ejecuta los programas. Es decir, el tema principal de este curso es la estructura de la m\u00e1quina: los circuitos electr\u00f3nicos, y las operaciones computacionales que estos circuitos llevan a cabo. Para concretizar estas ideas, vamos a estudiar con cierto detalle el ISA RISC-V. Usamos este ISA pues es m\u00e1s sencillo que otras familias, mientras que posee caracter\u00edsticas deseables como paralelismo.","title":"Proyectos"},{"location":"#bienvenidos-a-cc-3","text":"En cursos anteriores han aprendido a programar en un nivel bastante alto de abstracci\u00f3n. Ac\u00e1 nos concentraremos en la m\u00e1quina y c\u00f3mo esta ejecuta los programas que ustedes escriben. En este curso nos preocuparemos no tanto por el proceso de escribir un programa de computadora, sino m\u00e1s bien en c\u00f3mo la computadora ejecuta los programas. Es decir, el tema principal de este curso es la estructura de la m\u00e1quina: los circuitos electr\u00f3nicos, y las operaciones computacionales que estos circuitos llevan a cabo. Para concretizar estas ideas, vamos a estudiar con cierto detalle el ISA RISC-V. Usamos este ISA pues es m\u00e1s sencillo que otras familias, mientras que posee caracter\u00edsticas deseables como paralelismo.","title":"Bienvenidos a CC-3"},{"location":"labs/lab00/","text":"Lab 0 - Git y Representaci\u00f3n de N\u00fameros Objetivos Aprender git y crear cuenta de GitHub. Ganar m\u00e1s intuici\u00f3n para trabajar con n\u00fameros binarios. Lecturas P&H: 2.4 Ejercicio 1: Cuenta de GitHub Por favor lean las siguientes instrucciones cuidadosamente antes de seguir con el laboratorio. La mayor parte de los problemas que tienen los estudiantes durante este laboratorio se pueden prevenir siguiendo atentamente los pasos que se indican. Para este curso necesitaremos que utilicen git , un sistema de control de versiones distribuido . Los sistemas de control de versiones son las mejores herramientas para compartir y almacenar c\u00f3digo a comparaci\u00f3n de mandar correos con archivos adjuntos, utilizar memorias flash, o incluso compartir documentos mediante DropBox o Google Docs. Vamos a estar usando GitHub para tener repositorios privados en donde van a almacenar su c\u00f3digo remotamente. Si la oraci\u00f3n anterior no les dijo nada, no se preocupen, vamos a guiarlos en el proceso m\u00e1s adelante. Pero primero, necesitan crear una cuenta de GitHub . \u00bfPor qu\u00e9 GitHub? GitHub ahora le permite a todas las cuentas gratuitas tener repositorios privados ilimitados con algunas limitaciones que no van a ser ning\u00fan problema para nosotros. GitHub Onboarding Naveguen a la siguiente p\u00e1gina: github.com . Si no tienen una cuenta de GitHub todav\u00eda, creen una en el siguiente link . Preparaci\u00f3n Visiten este link . Aqu\u00ed encontrar\u00e1n todos los archivos necesarios para completar este laboratorio. En esta p\u00e1gina, encontrar\u00e1n un bot\u00f3n que dice \"Accept this assignment\". Al presionar este bot\u00f3n, se crear\u00e1 autom\u00e1ticamente un repositorio en Github llamado https://www.github.com/cc3-an/2021-lab00-git-<USUARIO> . Noten que el \"due\u00f1o\" de este repositorio es un usuario llamado cc3-an , y el usuario de ustedes es \u00fanicamente el sufijo del nombre del repo. De esta forma, nos encargamos de tener acceso siempre a su c\u00f3digo, en caso existan copias o cualquier otro tipo de trampa. Sepan de una vez que, si encontramos plagio en sus laboratorios, su nota ser\u00e1 AUTOM\u00c1TICAMENTE 0, sin posibilidad de cambiarla. De repetirse nuevamente este acontecimiento, el staff del curso organizar\u00e1 una reuni\u00f3n con ustedes y sus directores de carrera para contarles lo ocurrido y sancionarlos conforme al reglamento de la universidad. Despu\u00e9s de realizar esto, en la m\u00e1quina virtual (o sus propias computadoras) abran una terminal en el directorio que prefieran, y ejecuten el siguiente comando: 1 git clone https://github.com/cc3-an/2021-lab00-git-<SU USUARIO DE GITHUB> esto descargar\u00e1 en el directorio que escogieron todos los archivos base para este laboratorio. Configurando git Ahora que ya hemos creado nuestro repositorio, vamos a configurar git para que sepa qui\u00e9nes son. Abran una terminal Ctrl + Alt + T y ejecuten los siguientes comandos listados abajo, reemplazando NOMBRE con su nombre y apellido (entre comillas) y CORREO con la direcci\u00f3n de correo que utilizar\u00f3n para registrarse en GitHub. 1 git config --global user.name \"NOMBRE\" 1 git config --global user.email \"CORREO\" Ejercicio 2: git y Remotes Primero, algunas definiciones r\u00e1pidas: Un remote es la p\u00e1gina web host o servidor que va a almacenar su c\u00f3digo remotamente en vez de tener \u00fanicamente el c\u00f3digo de forma local en su propia computadora. Pueden pensar en esto de igual manera a como se almacena un archivo en DropBox o Google Drive pero con el poder que nos da git. Un branch es una secuencia (por aparte) de diferentes cambios a su c\u00f3digo. Pueden pensar en los branches como diferentes versiones de su c\u00f3digo, que en alg\u00fan punto fueron lo mismo. La siguiente figura muestra a que nos referimos como branches. A lo largo de este curso, estar\u00e1n trabajando en dos diferentes \" computadoras \" que generalmente tendran diferentes versiones de su c\u00f3digo en alg\u00fan tiempo. Estas dos son: su computadora personal y su remote de GitHub (sus repositorios privados de GitHub). Es esencial que entiendan la diferencia entre estas dos y como pueden compartir c\u00f3digo entre ellas. Su computadora personal es la que les servir\u00e1 para hacer todo el trabajo (laboratorios y proyectos) que necesiten hacer durante el curso, nada nuevo aqu\u00ed. Su cuenta de GitHub y los remotes les servir\u00e1n para muchos prop\u00f3sitos, pero la principal raz\u00f3n es para tener un backup o copia de respaldo, de tal manera que si algo malo le sucede a sus computadoras (esperamos no ), puedan recuperar su c\u00f3digo en vez de empezar de cero nuevamente. Conceptualmente, pueden pensar en los remotes de GitHub como otra computadora que \u00fanicamente almacena su c\u00f3digo y nada m\u00e1s. Siempre deben subir sus cambios a GitHub haciendo push al remote (es decir actualizando los archivos en GitHub) y tambi\u00e9n pueden descargar los cambios de GitHub haciendo pull (actualizando los archivos en su computadora personal). Haciendo push hacia GitHub Vamos a crear un archivo llamado hello.sh en la carpeta del laboratorio ejecutando el siguiente commando en la terminal: 1 echo 'echo \"Hola Mundo\"' > hello.sh Luego pueden correr el archivo en la terminal con bash hello.sh . En la terminal se imprimir\u00e1 Hola Mundo . Ahora utilicemos git para ver los archivos que todav\u00eda no han sido rastreados utilizando status : 1 git status Lo que producir\u00e1 lo siguiente: 1 2 3 4 5 6 7 8 9 10 On branch master No commits yet Untracked files: ( use \"git add <file>...\" to include in what will be committed ) hello.sh nothing added to commit but untracked files present ( use \"git add\" to track ) Esto es porque hemos creado un archivo nuevo llamado hello.sh y no lo hemos agregado. Podemos agregarlo y hacer commit: 1 2 3 4 git add hello.sh # agrega el archivo hello.sh para hacer commit git commit -m \"Mensaje del Commit\" # ingresa cualquier mensaje que quieras git branch # deberias de ver que solo existe el branch master y que estas en ella (*) git push -u origin master # Esto hace push de tu codigo hacia GitHub (lo puedes ver en GitHub ahora) El control de versiones git esta construido alrededor de commits , o checkpoints en el desarrollo de diferentes versiones/etapas de su c\u00f3digo. Para explicar los pasos de arriba un poco m\u00e1s: git add [archivo] le dir\u00e1 a git que han hecho cambios a ese archivo y que quieren que esos cambios se guarden en el siguiente commit (staging). git commit -m \"mensaje\" oficialmente guarda esos cambios que acaban de agregar, y crea un snapshot del contenido actual de todos los archivos en el repositorio. Ahora siempre van a tener la opci\u00f3n de revertir su c\u00f3digo hacia este commit. git push -u origin master manda todo el contenido del repositorio que est\u00e1 en el branch \"master\" al repositorio remoto \"origin\" (recuerden que agregamos el repositorio de GitHub \"lab0_git\" como remote y lo llamamos \"origin\"). Cuando estamos trabajando con git, si alguna vez no est\u00e1n seguros de algo, pero quieren asegurarse de que tienen una copia guardada del contenido actual de su c\u00f3digo, solo tienen que correr git add . y despu\u00e9s git commit en la terminal. Un \u00faltimo comando de git que pueden encontrar bastante util es git log . Pueden ejectuar este comando en la terminal y van a ver un historial o log de todos los commits que se han hecho (en el branch actual), incluyendo el tiempo y quien hizo el commit. Ejercicio 3: Alfabeto Binario Vamos a utilizar n\u00fameros de 4 bits. Si apilamos cinco n\u00fameros de 4 bits uno encima de otro en binario, podemos crear patrones e im\u00e1genes. Para ayudarlos a visualizar esto, pueden pensar que un bit en cero es blanco y un bit en uno es negro. Por ejemplo miren el siguiente patr\u00f3n de bits. Preguntas \u00bfCu\u00e1les son los cinco n\u00fameros en decimal (separados por una coma) que producen el patr\u00f3n de arriba? \u00bfCu\u00e1les son los cinco digitos en hexadecimal (separados por una coma) que producen el patr\u00f3n de arriba? \u00bfQu\u00e9 letra se dibuja con los siguientes n\u00fameros en decimal: 1,1,9,9,6? \u00bfQu\u00e9 letra se dibuja con el siguiente numero en hexadecimal: 0xF8F88? \u00bfCu\u00e1l es el numero en hexadecimal para dibujar la letra b (min\u00fascula)? \u00bfUtilizar\u00edas cinco d\u00edgitos hexadecimales para dibujar la letra N? Contesten Si o No En los archivos del laboratorio van a encontrar un archivo de texto ex3.txt con lo siguiente: 1 2 3 4 5 6 1: 2: 3: 4: 5: 6: En este archivo tienen que colocar todas sus respuestas de las preguntas de arriba siguiendo ese formato por ejemplo un archivo valido ser\u00eda: 1 2 3 4 5 6 1:1,2,3,4,5 2:0x1,0x2,0x3,0x4,0x5 3:A 4:A 5:0xcafee 6:Si/No Si ya contestaron todo y creen que est\u00e1 correcto pueden agregar los cambios, hacer commit y subirlo al repositorio remoto ejecutando los siguientes comandos en la terminal: 1 2 3 git add ex4.txt git commit -m \"ex. 3 complete\" git push -u origin master Ejercicio 4: 1,000 billetes de $1 Imaginen que tienen mil billetes de $1 y 10 sobres. Para este ejercicio tienen que encontrar una manera de poner una cantidad determinada de billetes de $1 en cada uno de los sobres de tal forma que, sin importar la cantidad de dinero que se les pida (entre $1 y $1000), simplemente entreguen una combinaci\u00f3n de los sobres y que siempre est\u00e9n seguros de que est\u00e1n dando la cantidad correcta. En los archivos del laboratorio hay un archivo de texto llamado ex4.txt en donde encontrar\u00e1n lo siguiente: 1 a,b,c,d,e,f,g,h,i,j Cada una de las letras representa un sobre, tienen que reemplazar cada letra por la cantidad de billetes de $1 que crean correcta, esa cantidad tiene que ser >= 0 (en decimal) y recuerda que la suma de la cantidad de cada uno de los sobres tiene que ser igual a 1000 . Si ya contestaron todo y creen que est\u00e1 correcto pueden agregar los cambios, hacer commit y subirlo al repositorio remoto ejecutando los siguientes comandos en la terminal: 1 2 3 git add ex4.txt git commit -m \"ex. 4 complete\" git push -u origin master Entrega y calificaci\u00f3n A partir del siguiente lab tendremos autograder y podran conocer su nota inmediatamente. Listo, terminaron su primer laboratorio. No olviden que tienen que subir SIEMPRE la URL del repositorio en la asignaci\u00f3n del GES. La URL se tiene que ver algo como lo siguiente: 1 https://www.github.com/cc3-an/2021-lab00-git-<USUARIO>","title":"00: Git"},{"location":"labs/lab00/#lab-0-git-y-representacion-de-numeros","text":"","title":"Lab 0 - Git y Representaci\u00f3n de N\u00fameros"},{"location":"labs/lab00/#objetivos","text":"Aprender git y crear cuenta de GitHub. Ganar m\u00e1s intuici\u00f3n para trabajar con n\u00fameros binarios.","title":"Objetivos"},{"location":"labs/lab00/#lecturas","text":"P&H: 2.4","title":"Lecturas"},{"location":"labs/lab00/#ejercicio-1-cuenta-de-github","text":"Por favor lean las siguientes instrucciones cuidadosamente antes de seguir con el laboratorio. La mayor parte de los problemas que tienen los estudiantes durante este laboratorio se pueden prevenir siguiendo atentamente los pasos que se indican. Para este curso necesitaremos que utilicen git , un sistema de control de versiones distribuido . Los sistemas de control de versiones son las mejores herramientas para compartir y almacenar c\u00f3digo a comparaci\u00f3n de mandar correos con archivos adjuntos, utilizar memorias flash, o incluso compartir documentos mediante DropBox o Google Docs. Vamos a estar usando GitHub para tener repositorios privados en donde van a almacenar su c\u00f3digo remotamente. Si la oraci\u00f3n anterior no les dijo nada, no se preocupen, vamos a guiarlos en el proceso m\u00e1s adelante. Pero primero, necesitan crear una cuenta de GitHub . \u00bfPor qu\u00e9 GitHub? GitHub ahora le permite a todas las cuentas gratuitas tener repositorios privados ilimitados con algunas limitaciones que no van a ser ning\u00fan problema para nosotros.","title":"Ejercicio 1: Cuenta de GitHub"},{"location":"labs/lab00/#github-onboarding","text":"Naveguen a la siguiente p\u00e1gina: github.com . Si no tienen una cuenta de GitHub todav\u00eda, creen una en el siguiente link .","title":"GitHub Onboarding"},{"location":"labs/lab00/#preparacion","text":"Visiten este link . Aqu\u00ed encontrar\u00e1n todos los archivos necesarios para completar este laboratorio. En esta p\u00e1gina, encontrar\u00e1n un bot\u00f3n que dice \"Accept this assignment\". Al presionar este bot\u00f3n, se crear\u00e1 autom\u00e1ticamente un repositorio en Github llamado https://www.github.com/cc3-an/2021-lab00-git-<USUARIO> . Noten que el \"due\u00f1o\" de este repositorio es un usuario llamado cc3-an , y el usuario de ustedes es \u00fanicamente el sufijo del nombre del repo. De esta forma, nos encargamos de tener acceso siempre a su c\u00f3digo, en caso existan copias o cualquier otro tipo de trampa. Sepan de una vez que, si encontramos plagio en sus laboratorios, su nota ser\u00e1 AUTOM\u00c1TICAMENTE 0, sin posibilidad de cambiarla. De repetirse nuevamente este acontecimiento, el staff del curso organizar\u00e1 una reuni\u00f3n con ustedes y sus directores de carrera para contarles lo ocurrido y sancionarlos conforme al reglamento de la universidad. Despu\u00e9s de realizar esto, en la m\u00e1quina virtual (o sus propias computadoras) abran una terminal en el directorio que prefieran, y ejecuten el siguiente comando: 1 git clone https://github.com/cc3-an/2021-lab00-git-<SU USUARIO DE GITHUB> esto descargar\u00e1 en el directorio que escogieron todos los archivos base para este laboratorio.","title":"Preparaci\u00f3n"},{"location":"labs/lab00/#configurando-git","text":"Ahora que ya hemos creado nuestro repositorio, vamos a configurar git para que sepa qui\u00e9nes son. Abran una terminal Ctrl + Alt + T y ejecuten los siguientes comandos listados abajo, reemplazando NOMBRE con su nombre y apellido (entre comillas) y CORREO con la direcci\u00f3n de correo que utilizar\u00f3n para registrarse en GitHub. 1 git config --global user.name \"NOMBRE\" 1 git config --global user.email \"CORREO\"","title":"Configurando git"},{"location":"labs/lab00/#ejercicio-2-git-y-remotes","text":"Primero, algunas definiciones r\u00e1pidas: Un remote es la p\u00e1gina web host o servidor que va a almacenar su c\u00f3digo remotamente en vez de tener \u00fanicamente el c\u00f3digo de forma local en su propia computadora. Pueden pensar en esto de igual manera a como se almacena un archivo en DropBox o Google Drive pero con el poder que nos da git. Un branch es una secuencia (por aparte) de diferentes cambios a su c\u00f3digo. Pueden pensar en los branches como diferentes versiones de su c\u00f3digo, que en alg\u00fan punto fueron lo mismo. La siguiente figura muestra a que nos referimos como branches. A lo largo de este curso, estar\u00e1n trabajando en dos diferentes \" computadoras \" que generalmente tendran diferentes versiones de su c\u00f3digo en alg\u00fan tiempo. Estas dos son: su computadora personal y su remote de GitHub (sus repositorios privados de GitHub). Es esencial que entiendan la diferencia entre estas dos y como pueden compartir c\u00f3digo entre ellas. Su computadora personal es la que les servir\u00e1 para hacer todo el trabajo (laboratorios y proyectos) que necesiten hacer durante el curso, nada nuevo aqu\u00ed. Su cuenta de GitHub y los remotes les servir\u00e1n para muchos prop\u00f3sitos, pero la principal raz\u00f3n es para tener un backup o copia de respaldo, de tal manera que si algo malo le sucede a sus computadoras (esperamos no ), puedan recuperar su c\u00f3digo en vez de empezar de cero nuevamente. Conceptualmente, pueden pensar en los remotes de GitHub como otra computadora que \u00fanicamente almacena su c\u00f3digo y nada m\u00e1s. Siempre deben subir sus cambios a GitHub haciendo push al remote (es decir actualizando los archivos en GitHub) y tambi\u00e9n pueden descargar los cambios de GitHub haciendo pull (actualizando los archivos en su computadora personal).","title":"Ejercicio 2: git y Remotes"},{"location":"labs/lab00/#haciendo-push-hacia-github","text":"Vamos a crear un archivo llamado hello.sh en la carpeta del laboratorio ejecutando el siguiente commando en la terminal: 1 echo 'echo \"Hola Mundo\"' > hello.sh Luego pueden correr el archivo en la terminal con bash hello.sh . En la terminal se imprimir\u00e1 Hola Mundo . Ahora utilicemos git para ver los archivos que todav\u00eda no han sido rastreados utilizando status : 1 git status Lo que producir\u00e1 lo siguiente: 1 2 3 4 5 6 7 8 9 10 On branch master No commits yet Untracked files: ( use \"git add <file>...\" to include in what will be committed ) hello.sh nothing added to commit but untracked files present ( use \"git add\" to track ) Esto es porque hemos creado un archivo nuevo llamado hello.sh y no lo hemos agregado. Podemos agregarlo y hacer commit: 1 2 3 4 git add hello.sh # agrega el archivo hello.sh para hacer commit git commit -m \"Mensaje del Commit\" # ingresa cualquier mensaje que quieras git branch # deberias de ver que solo existe el branch master y que estas en ella (*) git push -u origin master # Esto hace push de tu codigo hacia GitHub (lo puedes ver en GitHub ahora) El control de versiones git esta construido alrededor de commits , o checkpoints en el desarrollo de diferentes versiones/etapas de su c\u00f3digo. Para explicar los pasos de arriba un poco m\u00e1s: git add [archivo] le dir\u00e1 a git que han hecho cambios a ese archivo y que quieren que esos cambios se guarden en el siguiente commit (staging). git commit -m \"mensaje\" oficialmente guarda esos cambios que acaban de agregar, y crea un snapshot del contenido actual de todos los archivos en el repositorio. Ahora siempre van a tener la opci\u00f3n de revertir su c\u00f3digo hacia este commit. git push -u origin master manda todo el contenido del repositorio que est\u00e1 en el branch \"master\" al repositorio remoto \"origin\" (recuerden que agregamos el repositorio de GitHub \"lab0_git\" como remote y lo llamamos \"origin\"). Cuando estamos trabajando con git, si alguna vez no est\u00e1n seguros de algo, pero quieren asegurarse de que tienen una copia guardada del contenido actual de su c\u00f3digo, solo tienen que correr git add . y despu\u00e9s git commit en la terminal. Un \u00faltimo comando de git que pueden encontrar bastante util es git log . Pueden ejectuar este comando en la terminal y van a ver un historial o log de todos los commits que se han hecho (en el branch actual), incluyendo el tiempo y quien hizo el commit.","title":"Haciendo push hacia GitHub"},{"location":"labs/lab00/#ejercicio-3-alfabeto-binario","text":"Vamos a utilizar n\u00fameros de 4 bits. Si apilamos cinco n\u00fameros de 4 bits uno encima de otro en binario, podemos crear patrones e im\u00e1genes. Para ayudarlos a visualizar esto, pueden pensar que un bit en cero es blanco y un bit en uno es negro. Por ejemplo miren el siguiente patr\u00f3n de bits.","title":"Ejercicio 3: Alfabeto Binario"},{"location":"labs/lab00/#preguntas","text":"\u00bfCu\u00e1les son los cinco n\u00fameros en decimal (separados por una coma) que producen el patr\u00f3n de arriba? \u00bfCu\u00e1les son los cinco digitos en hexadecimal (separados por una coma) que producen el patr\u00f3n de arriba? \u00bfQu\u00e9 letra se dibuja con los siguientes n\u00fameros en decimal: 1,1,9,9,6? \u00bfQu\u00e9 letra se dibuja con el siguiente numero en hexadecimal: 0xF8F88? \u00bfCu\u00e1l es el numero en hexadecimal para dibujar la letra b (min\u00fascula)? \u00bfUtilizar\u00edas cinco d\u00edgitos hexadecimales para dibujar la letra N? Contesten Si o No En los archivos del laboratorio van a encontrar un archivo de texto ex3.txt con lo siguiente: 1 2 3 4 5 6 1: 2: 3: 4: 5: 6: En este archivo tienen que colocar todas sus respuestas de las preguntas de arriba siguiendo ese formato por ejemplo un archivo valido ser\u00eda: 1 2 3 4 5 6 1:1,2,3,4,5 2:0x1,0x2,0x3,0x4,0x5 3:A 4:A 5:0xcafee 6:Si/No Si ya contestaron todo y creen que est\u00e1 correcto pueden agregar los cambios, hacer commit y subirlo al repositorio remoto ejecutando los siguientes comandos en la terminal: 1 2 3 git add ex4.txt git commit -m \"ex. 3 complete\" git push -u origin master","title":"Preguntas"},{"location":"labs/lab00/#ejercicio-4-1000-billetes-de-1","text":"Imaginen que tienen mil billetes de $1 y 10 sobres. Para este ejercicio tienen que encontrar una manera de poner una cantidad determinada de billetes de $1 en cada uno de los sobres de tal forma que, sin importar la cantidad de dinero que se les pida (entre $1 y $1000), simplemente entreguen una combinaci\u00f3n de los sobres y que siempre est\u00e9n seguros de que est\u00e1n dando la cantidad correcta. En los archivos del laboratorio hay un archivo de texto llamado ex4.txt en donde encontrar\u00e1n lo siguiente: 1 a,b,c,d,e,f,g,h,i,j Cada una de las letras representa un sobre, tienen que reemplazar cada letra por la cantidad de billetes de $1 que crean correcta, esa cantidad tiene que ser >= 0 (en decimal) y recuerda que la suma de la cantidad de cada uno de los sobres tiene que ser igual a 1000 . Si ya contestaron todo y creen que est\u00e1 correcto pueden agregar los cambios, hacer commit y subirlo al repositorio remoto ejecutando los siguientes comandos en la terminal: 1 2 3 git add ex4.txt git commit -m \"ex. 4 complete\" git push -u origin master","title":"Ejercicio 4: 1,000 billetes de $1"},{"location":"labs/lab00/#entrega-y-calificacion","text":"A partir del siguiente lab tendremos autograder y podran conocer su nota inmediatamente. Listo, terminaron su primer laboratorio. No olviden que tienen que subir SIEMPRE la URL del repositorio en la asignaci\u00f3n del GES. La URL se tiene que ver algo como lo siguiente: 1 https://www.github.com/cc3-an/2021-lab00-git-<USUARIO>","title":"Entrega y calificaci\u00f3n"},{"location":"tutorials/install/","text":"Tutorial de Instalaci\u00f3n de Material El objetivo de este tutorial es dejar preparado el material que necesitaran para los laboratorios y proyectos. La mejor opcion: Maquina virtual Descarguen la siguiente m\u00e1quina virtual y \u00e1brala con VMware. Recuerde que usando VMware Player (gratuito, sin necesidad de licencia) puede abrir y utilizar maquinas virtuales ya hechas. Todos los links son para la misma m\u00e1quina virtual. Si alguno falla, utilice otro. Descargar maquina virtual desde Google Drive Descargar maquina virtual desde Google Drive (mirror) Descargar maquina virtual desde Mega Credenciales Usuario : student Password : student La m\u00e1quina virtual trae ya todo lo necesario para el semestre. Instalaci\u00f3n Nativa Para trabajar nativo necesitara Ubuntu 16 o 18 en ingl\u00e9s, se recomienda 18. En Ubuntu 20 no podra utilizar Jupiter. Si su Ubuntu no se encuentra en ingl\u00e9s, tendra problemas en el lab 2 (cgdb). Puede cambiar su idioma, o buscar la soluci\u00f3n al problema en Google. Si todav\u00eda no tiene Ubuntu instalado aqu\u00ed hay un tutorial para dual boot . Ponga mucha atenci\u00f3n, sea muy cuidadoso y sobre todo haga un backup de su informaci\u00f3n importante. Wow... parece que son bastantes instrucciones, seria m\u00e1s f\u00e1cil usar la m\u00e1quina virtual! Instalar git 1 2 sudo apt update sudo apt install git Instalar Java 1 2 sudo apt update sudo apt install default-jdk Instalar Python 3 1 2 3 4 5 sudo apt update sudo apt install software-properties-common sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.7 Instalar pip 1 2 sudo apt update sudo apt install python3-pip Las versiones recientes de Python suelen incluir todo lo que necesitamos (en la maquina virtual ya revisamos y esta todo lo que necesita! en serio, use la m\u00e1quina virtual!), verifiqu\u00e9moslo abriendo la terminal de Python con el comando python3 , luego en la terminal escribiremos los siguientes comandos 1 2 3 4 import os import sys import requests import zipfile Si ninguno nos dio problema, Python esta listo; si alguno fallo, lo instalaremos con pip 1 pip3 install nombreDelPaqueteQueDioError cURL Finalmente instalamos curl 1 2 sudo apt update sudo apt install curl CGDB Y terminamos instalando cgdb 1 2 sudo apt update sudo apt install cgdb Casi listo! Cuando lleguemos al lab 3 y al lab 5 alli le apareceran las instrucciones para instalar el software faltante. Mi computadora no es muy potente, que puedo hacer? Puede probar con algun IDE en l\u00ednea como repl.it . Aqu\u00ed podra trabajar un poco de C y entregar su lab 0 y lab 1, pero al llegar al lab 2 comienzan los problemas. Estamos tratando de buscar herramientas para trabajar en l\u00ednea, pero haga todo lo posible por trabajar ya sea en m\u00e1quina virtual o en Ubuntu nativo. Soy demasiado fan\u00e1tico de Windows 10, hay alguna opcion para mi? Puede instalar WSL en su m\u00e1quina. Luego de ese monton de pasos, tendra que instalar todo el material de arriba. No haga esto, mejor use la m\u00e1quina virtual. Esta es una opci\u00f3n que no aconsejamos para nada. Si esta en Windows, no le podremos ayudar con sus problemas, solo le sugeriremos que... adivino! use la m\u00e1quina virtual.","title":"Instalaci\u00f3n VM"},{"location":"tutorials/install/#tutorial-de-instalacion-de-material","text":"El objetivo de este tutorial es dejar preparado el material que necesitaran para los laboratorios y proyectos.","title":"Tutorial de Instalaci\u00f3n de Material"},{"location":"tutorials/install/#la-mejor-opcion-maquina-virtual","text":"Descarguen la siguiente m\u00e1quina virtual y \u00e1brala con VMware. Recuerde que usando VMware Player (gratuito, sin necesidad de licencia) puede abrir y utilizar maquinas virtuales ya hechas. Todos los links son para la misma m\u00e1quina virtual. Si alguno falla, utilice otro. Descargar maquina virtual desde Google Drive Descargar maquina virtual desde Google Drive (mirror) Descargar maquina virtual desde Mega","title":"La mejor opcion: Maquina virtual"},{"location":"tutorials/install/#credenciales","text":"Usuario : student Password : student La m\u00e1quina virtual trae ya todo lo necesario para el semestre.","title":"Credenciales"},{"location":"tutorials/install/#instalacion-nativa","text":"Para trabajar nativo necesitara Ubuntu 16 o 18 en ingl\u00e9s, se recomienda 18. En Ubuntu 20 no podra utilizar Jupiter. Si su Ubuntu no se encuentra en ingl\u00e9s, tendra problemas en el lab 2 (cgdb). Puede cambiar su idioma, o buscar la soluci\u00f3n al problema en Google. Si todav\u00eda no tiene Ubuntu instalado aqu\u00ed hay un tutorial para dual boot . Ponga mucha atenci\u00f3n, sea muy cuidadoso y sobre todo haga un backup de su informaci\u00f3n importante. Wow... parece que son bastantes instrucciones, seria m\u00e1s f\u00e1cil usar la m\u00e1quina virtual!","title":"Instalaci\u00f3n Nativa"},{"location":"tutorials/install/#instalar-git","text":"1 2 sudo apt update sudo apt install git","title":"Instalar git"},{"location":"tutorials/install/#instalar-java","text":"1 2 sudo apt update sudo apt install default-jdk","title":"Instalar Java"},{"location":"tutorials/install/#instalar-python-3","text":"1 2 3 4 5 sudo apt update sudo apt install software-properties-common sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.7","title":"Instalar Python 3"},{"location":"tutorials/install/#instalar-pip","text":"1 2 sudo apt update sudo apt install python3-pip Las versiones recientes de Python suelen incluir todo lo que necesitamos (en la maquina virtual ya revisamos y esta todo lo que necesita! en serio, use la m\u00e1quina virtual!), verifiqu\u00e9moslo abriendo la terminal de Python con el comando python3 , luego en la terminal escribiremos los siguientes comandos 1 2 3 4 import os import sys import requests import zipfile Si ninguno nos dio problema, Python esta listo; si alguno fallo, lo instalaremos con pip 1 pip3 install nombreDelPaqueteQueDioError","title":"Instalar pip"},{"location":"tutorials/install/#curl","text":"Finalmente instalamos curl 1 2 sudo apt update sudo apt install curl","title":"cURL"},{"location":"tutorials/install/#cgdb","text":"Y terminamos instalando cgdb 1 2 sudo apt update sudo apt install cgdb Casi listo! Cuando lleguemos al lab 3 y al lab 5 alli le apareceran las instrucciones para instalar el software faltante.","title":"CGDB"},{"location":"tutorials/install/#mi-computadora-no-es-muy-potente-que-puedo-hacer","text":"Puede probar con algun IDE en l\u00ednea como repl.it . Aqu\u00ed podra trabajar un poco de C y entregar su lab 0 y lab 1, pero al llegar al lab 2 comienzan los problemas. Estamos tratando de buscar herramientas para trabajar en l\u00ednea, pero haga todo lo posible por trabajar ya sea en m\u00e1quina virtual o en Ubuntu nativo.","title":"Mi computadora no es muy potente, que puedo hacer?"},{"location":"tutorials/install/#soy-demasiado-fanatico-de-windows-10-hay-alguna-opcion-para-mi","text":"Puede instalar WSL en su m\u00e1quina. Luego de ese monton de pasos, tendra que instalar todo el material de arriba. No haga esto, mejor use la m\u00e1quina virtual. Esta es una opci\u00f3n que no aconsejamos para nada. Si esta en Windows, no le podremos ayudar con sus problemas, solo le sugeriremos que... adivino! use la m\u00e1quina virtual.","title":"Soy demasiado fan\u00e1tico de Windows 10, hay alguna opcion para mi?"}]}